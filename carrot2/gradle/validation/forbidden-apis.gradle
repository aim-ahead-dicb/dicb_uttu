
allprojects { prj ->
  plugins.withId("java", {
    prj.apply plugin: 'de.thetaphi.forbiddenapis'

    if (!rootProject.hasProperty("forbiddenApiRulesDir")) {
      throw new GradleException('Define "forbiddenApiRulesDir" on the root project pointing at rule directory.')
    }

    def dynamicSignatures = { configuration ->
      def deps = configuration.resolvedConfiguration.resolvedArtifacts
          .collect { a -> a.moduleVersion.id }
          .collect { id -> "${id.group}-${id.name}" }
          .sort()

      deps.each { dep ->
        def signaturesFile = file("${forbiddenApiRulesDir}/${dep}.txt")
        if (signaturesFile.exists()) {
          signaturesFiles += files(signaturesFile)
        }
      }
    }

    forbiddenApisMain {
      bundledSignatures += [
        'jdk-unsafe',
        'jdk-deprecated',
        'jdk-internal',
        'jdk-non-portable',
        'jdk-system-out',
      ]

      suppressAnnotations += [
        "**.SuppressForbidden"
      ]

      doFirst dynamicSignatures.curry(configurations.compileClasspath)
    }

    forbiddenApisTest {
      bundledSignatures += [
        'jdk-unsafe',
        'jdk-deprecated',
        'jdk-internal',
        'jdk-non-portable',
      ]

      suppressAnnotations += [
        "**.SuppressForbidden"
      ]

      doFirst dynamicSignatures.curry(configurations.testCompileClasspath)
    }

    // Configure testFixtures sourceset, if defined.
    tasks.matching { it.name == "forbiddenApisTestFixtures" }.all {
      bundledSignatures += [
          'jdk-unsafe',
          'jdk-deprecated',
          'jdk-internal',
          'jdk-non-portable',
      ]

      suppressAnnotations += [
          "**.SuppressForbidden"
      ]

      doFirst dynamicSignatures.curry(configurations.testFixturesCompileClasspath)
    }

    // Attach validation to check task.
    check.dependsOn forbiddenApisMain
    check.dependsOn forbiddenApisTest

    // We rely on resolved configurations to compute the relevant set of rule
    // files for forbiddenApis. Since we don't want to resolve these configurations until
    // the task is executed, we can't really use them as task inputs properly. This is a
    // chicken-and-egg problem.
    //
    // This is the simplest workaround possible: just point at all the rule files and indicate
    // them as inputs. This way if a rule is modified, checks will be reapplied.
    configure([
      forbiddenApisMain,
      forbiddenApisTest
    ]) { task ->
      task.inputs.dir(forbiddenApiRulesDir)
    }
  })
}
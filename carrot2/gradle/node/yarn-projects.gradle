// Configure node/ yarn projects

def projectList = [
    ":dcs:contexts:frontend",
    ":doc"
].findAll { projectName ->
  subprojects.any({
    it.path == projectName
  })
}.collect { project(it) }

// Now apply the same configuration to all projects.
configure(projectList) {
  apply plugin: 'base'
  apply plugin: deps.plugins.node.gradle.get().pluginId

  ext {
    yarnEnv = [
      'REACT_APP_VERSION'   : rootProject.replaceTokens['product.version'],
      'REACT_APP_BUILD_DATE': rootProject.replaceTokens['product.buildDate'],
      'REACT_APP_GIT_REV'   : rootProject.replaceTokens['product.gitrev']
    ]
  }

  configurations {
    yarnOutput {
    }
  }

  // Change the default build directory for gradle so that
  // it doesn't conflict with npm builds (webpack uses 'build' by default).
  buildDir = file("build-gradle")

  // Configure node and yarn versions.
  node {
    version = deps.versions.node.get()
    yarnVersion = deps.versions.yarn.get()
    download = true
  }

  tasks.withType(YarnTask) {
    environment.put("GRADLE_YARNRC", "false")
    environment.put("CI", Objects.requireNonNullElse(System.getenv("CI"), "false"))
  }

  task yarnInstall(type: YarnTask) {
    group 'build'

    inputs.file('package.json')
    inputs.file('yarn.lock')
    outputs.file('.yarn/install-state.gz')

    args = [
        'install',
        '--immutable'
    ]
  }

  task yarnBuild(type: YarnTask) {
    group 'build'
    dependsOn yarnInstall

    def nonInputProperties = [
        "REACT_APP_BUILD_DATE",
        "REACT_APP_GIT_REV",
    ] as Set

    afterEvaluate {
      project.properties.each { k, v ->
        if (k.startsWith("REACT_APP_")) {
          yarnEnv.put(k, v)
        }
      }

      System.getenv().each { k, v ->
        if (k.startsWith("REACT_APP_")) {
          yarnEnv.put(k, v)
        }
      }
    }

    inputs.files { jsSources }
    inputs.file('package.json')
    inputs.file('yarn.lock')

    outputs.dir { project.jsBuildDir }

    environment.putAll(project.provider {
      return yarnEnv.findAll { k, v -> !nonInputProperties.contains(k) }
          .collectEntries { k, v -> [k, Objects.toString(v)] }
    })

    // Pass non-input trigering environment variables separately so that builds
    // are not triggered when they change.
    // https://github.com/node-gradle/gradle-node-plugin/issues/187
    execOverrides { ExecSpec spec ->
      yarnEnv.findAll { k, v -> nonInputProperties.contains(k) }.each { k, v ->
        spec.environment(k, v)
      }

      // Dump environment variables used, for debugging purposes.
      spec.environment.each { k, v ->
        if (yarnEnv.containsKey(k)) {
          logger.lifecycle("Using yarn env variable $k=$v")
        }
      }
    }

    args = ['build']
  }

  task fastBuild {
    doFirst {
      logger.warn("Omitting full yarn build in fast build: ${project.path}")
    }
  }

  artifacts {
    yarnOutput provider { jsBuildDir }, {
      if (project.hasProperty("fast")) {
        builtBy fastBuild
      } else {
        builtBy yarnBuild
      }
    }
  }

  assemble.dependsOn configurations.yarnOutput

  clean {
    doLast {
      project.delete project.files(project.jsBuildDir)
    }
  }

  task cleanNodeDirs(type: Delete) {
    delete ".gradle"
    delete ".yarn"
  }
}

// Yarn install creates many problems when multiple instances try to run concurrently. Enforce
// sequential ordering here.
afterEvaluate {
  Task yarnOrdering = rootProject.tasks.create("yarnOrdering")

  List<Task> taskOrder = []
  taskOrder += projectList.collectMany { subproject ->
    [ subproject.path + ":yarnInstall",
      subproject.path + ":yarnBuild"
    ]
  }.collect { tasks.findByPath(it as String) }
  taskOrder += [ tasks.findByPath(":dcs:contexts:frontend:prettierApply"),
                 tasks.findByPath(":dcs:contexts:frontend:prettierCheck") ]
  taskOrder += yarnOrdering

  List<?> sequence = []
  taskOrder.each { task ->
    task.mustRunAfter(sequence)
    sequence += task
  }
}
